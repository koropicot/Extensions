<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="Util.ttinclude"#>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace Extensions
{
    public static class Func
    {
<#
	foreach (var arity in Enumerable.Range(2, 15))
    {
			var types = Repeat("T{0}", ",", 1, arity);

#>
        /// <summary><#=arity#>引数関数をカリー化します。</summary>
        public static <#= Nest("TResult", "Func<T{1}, {0}>", 1, arity) #> Curry<<#= types #>, TResult>(this Func<<#= types #>, TResult> func)
        {
            return <#= Nest("func(" + Repeat("v{0}", ",", 1, arity) + ")", "v{1} => {0}", 1, arity) #>;
        }
        /// <summary>カリー化された<#=arity#>引数関数をアンカリー化します。</summary>
        public static Func<<#= types #>, TResult> UnCurry<<#= types #>, TResult>(this <#= Nest("TResult", "Func<T{1}, {0}>", 1, arity) #> func)
        {
            return (<#=Repeat("v{0}", ",", 1, arity)#>) => func<#= Repeat("(v{0})", "", 1, arity) #>;
        }

<# } #>

        /// <summary>0引数関数を0要素のProductを取る関数にします。</summary>
        public static Func<Product, TResult> Tuplize<TResult>(this Func<TResult> func)
        {
            return _ => func();
        }
        /// <summary>0要素のProductを取る関数を0引数関数にします。</summary>
        public static Func<TResult> UnTuplize<TResult>(this Func<Product, TResult> func)
        {
            return () => func(Product.Create());
        }

<#
	foreach (var arity in Enumerable.Range(1, 7))
    {
			var types = Repeat("T{0}", ",", 1, arity);

#>
        /// <summary><#=arity#>引数関数を<#=arity#>要素のタプルを取る関数にします。</summary>
        public static Func<Tuple<<#= types #>>, TResult> Tuplize<<#= types #>, TResult>(this Func<<#= types #>, TResult> func)
        {
            return tuple => func(<#= Repeat("tuple.Item{0}", ",", 1, arity) #>);
        }
        /// <summary><#=arity#>要素のタプルを取る関数を<#=arity#>引数関数にします。</summary>
        public static Func<<#= types #>, TResult> UnTuplize<<#= types #>, TResult>(this Func<Tuple<<#= types #>>, TResult> func)
        {
            return (<#=Repeat("v{0}", ",", 1, arity)#>) => func(Tuple.Create(<#= Repeat("v{0}", ",", 1, arity) #>));
        }
<# } #>
<#
	foreach (var arity in Enumerable.Range(1, 15))
    {
			var types = Repeat("T{0}", ",", 1, arity);

#>
        /// <summary>カリー化された<#=arity#>引数関数の第1引数を最後に回すことで部分適用の適用しない部分を実現します。</summary>
        public static <#= Nest("Func<T1, TResult>", "Func<T{1}, {0}>", 2, arity-1) #> _<<#= types #>, TResult>(
            this <#= Nest("TResult", "Func<T{1}, {0}>", 1, arity) #> func)
        {
            return <#= Nest("v1 => func" + Repeat("(v{0})", "", 1, arity) + "", "v{1} => {0}", 2, arity-1) #>;
        }
<# } #>
    }
}