<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="Util.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;

namespace Extensions
{
<#
for (int order = 1; order <= productMax; order++)
{
	var types = Repeat("T{0}", ", ", order);
	var constructorFormat =string.Format(@"
        /// <summary>{{0}}個目のコンストラクタです。</summary>
        private T{{0}} value{{0}};
        public static Variant<{0}> C{{0}}(T{{0}} v{{0}})
        {{{{
            var v =new Variant<{0}>();
            v.label = {{0}}; v.value{{0}} = v{{0}};
            return v;
        }}}}",types);
#>
    /// <summary>コンストラクタが<#=order#>個のバリアントです。</summary>
    public sealed class Variant<<#=types#>>
    {
        private Variant(){}
        private int label;
<#=Repeat(constructorFormat, "", order)#>
        /// <summary>パターンマッチをします。</summary>
        public T Match<T>(<#=Repeat("Func<T{0}, T> C{0}", ", ", order)#>)
        {
            switch (this.label)
            {<#=Repeat(@"
                case {0}: return C{0}(this.value{0});", "", order - 1)#>
                default: return <#=string.Format("C{0}(this.value{0});",order)#>
            }
        }
    }

<#}#>
}